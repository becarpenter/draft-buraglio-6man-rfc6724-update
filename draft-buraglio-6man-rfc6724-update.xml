<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2119 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap.xml">
]>


<rfc docName="draft-buraglio-6man-rfc6724-update" category="std" consensus="true">
  <front>
    <title>Updates to host address source selection</title>

    <author initials="T." surname="Chown" fullname="Tim Chown">
      <organization>JISC</organization>
      <address>
        <postal>
          <street></street> <street></street>
          <country>UK</country>
        </postal>
        <email>Tim.Chown@jisc.ac.uk</email>
      </address>
    </author>

    <date year="2023" month="May" day="03"/>

    
    
    

    <abstract>


<t>The behavior of ULA addressing as defined by <eref target="RFC6724"></eref> is preferred below legacy IPv4 addressing, thus rendering ULA IPv6 deployment functionally unusable in IPv4 / IPv6 dual-stacked environments. This behavior is counter to the operational behavior of GUA IPv6 addressing on nearly all modern operating systems that leverage a preference model based on <eref target="RFC6724"></eref>.
This document outlines buth the operational implications of section section 10.6 of <eref target="RFC6724"></eref> as described in <eref target="draft-ietf-v6ops-ula"></eref> and updates the process to better suit operational deployment and management of Unique Local Addressing (ULA) in production.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>In modern IPv4 / IPv6 dual-stacked environments, ULA addressing and GUA IPv6 addressing exhibit opposite behavior, which creates difficulties in deployments
leveraging ULA addressing. This conflicting behavior carries planning, operational, and security implications for environments requiring ULA addressing with IPv4/IPv6 dual-stack and prioritization of IPv6 traffic by default, as is the behavior with IPv6 GUA addressing.</t>

<t><vspace blankLines='999' /></t>

<section anchor="defining-well-known-unintended-operational-issues-with-ula"><name>Defining Well Known Unintended Operational Issues With ULA</name>

<t>The <eref target="RFC6724"></eref> definition is incomplete for ULA precedence if a host is operating in a dual-stack environment. 
    As written, <eref target="RFC6724"></eref> section 10.3 states:</t>

<ul empty="true"><li>
  <t>"The default policy table gives IPv6 addresses higher precedence than
IPv4 addresses.  This means that applications will use IPv6 in
preference to IPv4 when the two are equally suitable.  An
administrator can change the policy table to prefer IPv4 addresses by
giving the ::ffff:0.0.0.0/96 prefix a higher precedence".</t>
</li></ul>

<t>Expected behavior would be that ULA address space would be preferred over legacy IPv4, however this is not the case. This presents an acute issue with any environment that will use ULA addressing long side legacy IPv4 that is counter to the standard expectations for legacy IPv4 / IPv6 dual-stack behavior of preferring IPv6, as is performed with GUA addressing. 
Further, <eref target="RFC6724"></eref> Section 10.6 states that this is resolvable by adding a site-specific policy to cause ULAs
within a site to be preferred over global addresses. While theoretically possible, this presents significant issues on devices with inaccessable configuration files as detailed below.</t>

<section anchor="operational-implications"><name>Operational Implications</name>

<t>There are demonstrated and easily repeatable uses cases of ULA not being preferred in some OS and network equipment over legacy IPv4 that necessitate the immediate update to <eref target="RFC6724"></eref>
to better reflect the original intent of the RFC. As with most adjustments to standards, and using <eref target="RFC6724"></eref>
itself as a measurement, this update will likely take between 8-20 years to become common enough for relatively consistent behavior within operating systems. As a reference, as of the time of this writing, it has been 10 years since <eref target="RFC6724"></eref>
has been published but we continue to see existing commercial and open source operating systems exhibiting <eref target="RFC3484"></eref>
behavior. While it should be noted that <eref target="RFC6724"></eref> defines a solution that is functional academically, operationally the solution of adjusting the address preference selection table 
is both operating system dependent and unable to be signaled by any network mechanism such as within a router advertisement, DHCPv6 option, or the like. This lack of an
intra-protocol or network-based ability to adjust address selection preference, along with the inability to adjust a notable number of operating systems either programmatically or manually 
renders operational scalability of such a mechanism functionally untenable.<br />
It is anticipated that any update of <eref target="RFC6724"></eref> would require an additional 8-20 years to be fully realized and properly implemented in a majority of network connected systems. In addition, in the current versions of Linux, 
the priority table (gai.conf) still makes reference to <eref target="RFC3484"></eref>, further demonstrating the long timeframe to have updates reflected in a current, modern operating system. Examples of such out-of-date behavior can be found in printers, cameras, fixed devices, IoT sensors, and longer lifecycle equipment. 
It is especially important to note this behavior in the long lifecycle equipment that exists in industrial control and operational technology environments due to their very long mean time to replacement.
The core issue is the stated interpretation from gai.conf that has the following default:</t>

<figure title="gai.conf example" alt="gai.conf" anchor="scope4"><artwork><![CDATA[
#scopev4  <mask> <value> 
#  Add another rule to the RFC 6724 scope table for IPv4 addresses. 
#    By default the scope IDs described in section 3.2 in RFC 6724 are
#    used.  Changing these defaults should hardly ever be necessary.
#    The defaults are equivalent to:
#
#scopev4 ::ffff:169.254.0.0/112  2
#scopev4 ::ffff:127.0.0.0/104    2
#scopev4 ::ffff:0.0.0.0/96       14
]]></artwork></figure>

<t>Notice that they are interpreting the legacy IPv4 address range as "scopev4" and the prefix ::ffff:0.0.0.0/96 which has a higher precedence (35) in <eref target="RFC6724"></eref> then the ULA prefix of fc00::/7 (3). This results in legacy IPv4 being preferred over IPv6 ULA. While not inherently undesirable, the operational outcome when utilizing dual-stack with ULA is inconsistent and imparts unnecessary difficulty for both troubleshooting and creating the requisite baseline of expected behavior which are both requirements for supportable production deployments. This results in operational and engineering teams not gaining IPv6 experience as limited traffic is actually using IPv6, and security baseline expectations can, depending on the host implementation, be inconsistent at best and haphazard at worst.</t>

<t>In practice, <eref target="RFC6724"></eref> imposes several operational shortcomings preventing both consistent and desired behavior. If we define "desired behavior" as IPv6 preference over legacy IPv4 for address and protocol selection, then the resulting implemented behavior, based on <eref target="RFC6724"></eref>, will fall short of that intent. Based on the current verbiage, dual-stacked hosts configured with both a legacy IPv4 address and an IPv6 ULA address, the resulting behavior will manifest as a host choosing IPv4 over ULA IPv6. This behavior deviates from the current goal of a host with legacy IPv4 address and also with an IPv6 GUA address preferring IPv6 over IPv4. Operationally and strategically, this manifests as an impediment to deployment of IPv6 for many non service provider and mobile networks phasing in dual-stacked (both legacy IPv4 and IPv6) networking with the expectation of consistent behavior (i.e. always use IPv6 before legacy IPv4).</t>

<t>Other operational considerations are the use of the policy table detailed in section 2.1 of <eref target="RFC6724"></eref>. While conceptually the intent was for a configurable, longest-match table to be adjusted as-needed. In practice, modifying the prefix policy table remains difficult across platforms, and in some cases impossible. Embedded, proprietary, closed source, and IoT devices are especially difficult to adjust, and are in many cases incapable of any adjustment whatsoever. Large scale manipulation of the policy table also remains out of the realm of realistic support for small and medium scale operators due to lack of ability to manipulate all the hosts and systems, or a lack of tooling and access.</t>

<t>Below is an example of a gai.conf file from a modern Linux installation as of 03 April 2022:</t>

<figure><artwork><![CDATA[
# Configuration for getaddrinfo(3).
#
# So far only configuration for the destination address sorting is needed.
# RFC 3484 governs the sorting.  But the RFC also says that system
# administrators should be able to overwrite the defaults.  This can be
# achieved here.
#
# All lines have an initial identifier specifying the option followed by
# up to two values.  Information specified in this file replaces the
# default information.  Complete absence of data of one kind causes the
# appropriate default information to be used.  The supported commands include:
#
# reload  <yes|no>
#    If set to yes, each getaddrinfo(3) call will check whether this file
#    changed and if necessary reload.  This option should not really be
#    used.  There are possible runtime problems.  The default is no.
#
# label   <mask>   <value>
#    Add another rule to the RFC 3484 label table.  See section 2.1 in
#    RFC 3484.  The default is:
#
#label ::1/128       0
#label ::/0          1
#label 2002::/16     2
#label ::/96         3
#label ::ffff:0:0/96 4
#label fec0::/10     5
#label fc00::/7      6
#label 2001:0::/32   7
#
#    This default differs from the tables given in RFC 3484 by handling
#    (now obsolete) site-local IPv6 addresses and Unique Local Addresses.
#    The reason for this difference is that these addresses are never
#    NATed while IPv4 site-local addresses most probably are.  Given
#    the precedence of IPv6 over IPv4 (see below) on machines having only
#    site-local IPv4 and IPv6 addresses a lookup for a global address would
#    see the IPv6 be preferred.  The result is a long delay because the
#    site-local IPv6 addresses cannot be used while the IPv4 address is
#    (at least for the foreseeable future) NATed.  We also treat Teredo
#    tunnels special.
#
# precedence  <mask>   <value>
#    Add another rule to the RFC 3484 precedence table.  See section 2.1
#    and 10.3 in RFC 3484.  The default is:
#
#precedence  ::1/128       50
#precedence  ::/0          40
#precedence  2002::/16     30
#precedence ::/96          20
#precedence ::ffff:0:0/96  10
#
#    For sites which prefer IPv4 connections change the last line to
#
#precedence ::ffff:0:0/96  100

#
# scopev4  <mask>  <value>
#    Add another rule to the RFC 6724 scope table for IPv4 addresses.
#    By default the scope IDs described in section 3.2 in RFC 6724 are
#    used.  Changing these defaults should hardly ever be necessary.
#    The defaults are equivalent to:
#
#scopev4 ::ffff:169.254.0.0/112  2
#scopev4 ::ffff:127.0.0.0/104    2
#scopev4 ::ffff:0.0.0.0/96       14
]]></artwork></figure>

<t>Several assumptions are made here and are largely based on interpretations of <eref target="RFC6724"></eref>
but are not operationally relevant in modern networks. As this file or an equivalent structure within a given operating system is referenced, it dictates the 
behavior of the getaddrinfo() or analogous process. More specifically, where getaddrinfo() or comparable API is used, the sorting behavior should take into account both 
the source address of the requesting host as well as the destination addresses returned and sort according to both source and destination addressing, i.e, when a ULA address is 
returned, the source address selection should return and use a ULA address if available. Similarly, if a GUA address is returned the source address selection should return 
a GUA source address if available.</t>

<t>Here are some example failure modes:</t>

<t><list style="symbols">
  <t>ULA per <eref target="RFC6724"></eref> is less preferred (the Precedence value is lower) than all legacy IPv4 (represented by ::ffff:0:0/96 in the aforementioned table).</t>
  <t>Because of the lower Precedence value of fc00::/7, if a host has legacy IPv4 enabled, it will use legacy IPv4 before using ULA.</t>
  <t>A dual-stacked client will source the traffic from the legacy IPv4 address, meaning it will require a corresponding legacy IPv4 destination address.</t>
</list></t>

<t>Per number 3, even a host choosing a destination with A and AAAA DNS records, the host in question will choose the A record to get an legacy IPv4 address for the destination, meaning ULA IPv6 is rendered completely unused. It is also notable that Happy Eyeballs <eref target="RFC8305"></eref> will not change the source address selection process on a host. Happy Eyeballs will only modify the destination sorting process.</t>

<t>As a direct result of the described failure modes, and in addition to the aforementioned operational implications, use of ULA is not a viable option for dual-stack networking transition planning, large scale network modeling, network lab environments or other modes of emulating a large scale networking that runs both IPv4 and IPv6 concurrently with the expectation that IPv6 will be preferred by default.</t>

</section>
<section anchor="adjustments-to-rfc6724"><name>Adjustments to RFC6724</name>

<t>Rule 2.1 of <eref target="RFC6724"></eref> states: 
~~~~~~~~~~
IPv6 implementations SHOULD support configurable address selection
via a mechanism at least as powerful as the policy tables defined
here.  It is important that implementations provide a way to change
the default policies as more experience is gained.  Sections 10.3
through 10.7 provide examples of the kind of changes that might be
needed.
~~~~~~~~~~</t>

<t>This document updates <eref target="RFC6724"></eref> section 2.1 to the following:</t>

<figure><artwork><![CDATA[
IPv6 implementations MUST support configurable address selection
via a mechanism at least as powerful as the policy tables defined
here.  It is important that implementations provide a way to change
the default policies to ensure operational supportability and flexibility in deployment.
Sections 10.3 through 10.7 provide examples of the kind of changes that might be
needed.
]]></artwork></figure>

<t>Rule 5.5 of <eref target="RFC6724"></eref> states: 
~~~~~~~~~~
Rule 5.5: Prefer addresses in a prefix advertised by the next-hop.
If SA or SA's prefix is assigned by the selected next-hop that will
be used to send to D and SB or SB's prefix is assigned by a different
next-hop, then prefer SA.  Similarly, if SB or SB's prefix is
assigned by the next-hop that will be used to send to D and SA or
SA's prefix is assigned by a different next-hop, then prefer SB.
Discussion: An IPv6 implementation is not required to remember
which next-hops advertised which prefixes.  The conceptual models
of IPv6 hosts in Section 5 of <eref target="RFC4861"></eref> and Section 3 of [RFC4191]
have no such requirement.  Hence, Rule 5.5 is only applicable to
implementations that track this information.
~~~~~~~~~~</t>

<t>This document updates <eref target="RFC6724"></eref> section 5.5 to the following:
### needs eyes
~~~~~~~~~~
Rule 5.5: Hosts MUST prefer addresses in a prefix advertised by the next-hop.
If SA or SA's prefix is assigned by the selected next-hop that will
be used to send to D and SB or SB's prefix is assigned by a different
next-hop, then prefer SA.  Similarly, if SB or SB's prefix is
assigned by the next-hop that will be used to send to D and SA or
SA's prefix is assigned by a different next-hop, then prefer SB.
Discussion: An IPv6 implementation is not required to remember
which next-hops advertised which prefixes.  The conceptual models
of IPv6 hosts in Section 5 of <eref target="RFC4861"></eref> and Section 3 of [RFC4191]
have no such requirement.  Hence, Rule 5.5 is only applicable to
implementations that track this information.
~~~~~~~~~~</t>

<t>Rule 10.3 of <eref target="RFC6724"></eref> states: 
~~~~~~~~~~
The default policy table gives IPv6 addresses higher precedence than
   IPv4 addresses.  This means that applications will use IPv6 in
   preference to IPv4 when the two are equally suitable.  An
   administrator can change the policy table to prefer IPv4 addresses by
   giving the ::ffff:0.0.0.0/96 prefix a higher precedence:</t>

<figure><artwork><![CDATA[
  Prefix        Precedence Label
  ::1/128               50     0
  ::/0                  40     1
  ::ffff:0:0/96        100     4
  2002::/16             30     2
  2001::/32              5     5
  fc00::/7               3    13
  ::/96                  1     3
  fec0::/10              1    11
  3ffe::/16              1    12
]]></artwork></figure>

<t>This change to the default policy table produces the following
   behavior:</t>

<t>Candidate Source Addresses: 2001:db8::2 or fe80::1 or 169.254.13.78
   Destination Address List: 2001:db8::1 or 198.51.100.121
   Unchanged Result: 2001:db8::1 (src 2001:db8::2) then 198.51.100.121
   (src 169.254.13.78) (prefer matching scope)</t>

<t>Candidate Source Addresses: fe80::1 or 198.51.100.117
   Destination Address List: 2001:db8::1 or 198.51.100.121
   Unchanged Result: 198.51.100.121 (src 198.51.100.117) then
   2001:db8::1 (src fe80::1) (prefer matching scope)</t>

<t>Candidate Source Addresses: 2001:db8::2 or fe80::1 or 10.1.2.4
   Destination Address List: 2001:db8::1 or 10.1.2.3
   New Result: 10.1.2.3 (src 10.1.2.4) then 2001:db8::1 (src
   2001:db8::2) (prefer higher precedence)
~~~~~~~~~~</t>

<t>This document updates <eref target="RFC6724"></eref> section 10.3 to the following:</t>

</section>
<section anchor="smoldering-ideas"><name>Smoldering ideas</name>
<t>fixes without a global precedence for ULAs: 
set PIO with L=0 and A=0 (exactly as recommended in RFC 8028, but for other reasons). If a host sees such a PIO for a ULA prefix, it could serve as a signal that the prefix is to be given a suitable precedence, even though it is not on-link and not used for SLAAC.</t>

<t>Insert the /48 for any directly connected /64, utilize some RIO/PIO L=0/A=0 extension that adds additional non-direct /48.
# Lists</t>

<t><list style="symbols">
  <t>Item1</t>
  <t>Item2
  <list style="symbols">
      <t>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nibh mi, mollis varius imperdiet id, venenatis ut nisi. Phasellus mauris urna, ultrices at massa id, faucibus malesuada nisi.</t>
      <t>ItemB</t>
    </list></t>
  <t>Item3</t>
</list></t>

<t>This is a different block to separate the lists.</t>

<t><list style="numbers">
  <t>Item1</t>
  <t>Item2</t>
  <t>ItemA</t>
  <t>ItemB</t>
  <t>Item3
# Figures</t>
</list></t>

<figure title="A Rose" alt="rose" anchor="rose"><artwork><![CDATA[
       _,--._.-,           
      /\_r-,\_ )           
   .-.) _;='_/ (.;         
    \ \'     \/S )         
     L.'-. _.'|-'          
    <_`-'\'_.'/            
      `'-._( \             
             \\       ___  
              \\   .-'_. / 
               \\ /.-'_.'  
                \('--'     
                  \        
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="tables"><name>Tables</name>

<texttable title="Example Table" anchor="exampleTable">
      <ttcol align='left'>Left-aligned</ttcol>
      <ttcol align='center'>Center-aligned</ttcol>
      <ttcol align='right'>Right-aligned</ttcol>
      <c>Alpha</c>
      <c>Bravo</c>
      <c>Charlie</c>
      <c>delta</c>
      <c>echo</c>
      <c>foxtrot</c>
      <c>xylophone</c>
      <c>yankee</c>
      <c>zulu</c>
</texttable>

</section>
<section anchor="refstyle"><name>References</name>

<t>The IETF documents referred to here are <eref target="RFC2119"></eref> and <eref target="I-D.ietf-core-coap"></eref>.  We also refer to <eref target="REST">REST</eref>.  <eref target="a-rose"></eref> and <eref target="exampleTable"></eref> are explicitly tagged, as is <eref target="refstyle"></eref>, but <eref target="security-considerations"></eref> is implicit.  The web page at <eref target="http://ipv.sx/">ipv.sx</eref> is not part of this document.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>No, really.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>None</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2119;
&I-D.ietf-core-coap;


    </references>

    <references title='Informative References'>

<reference anchor="REST" >
  <front>
    
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="lorem-ipsum"><name>Lorem ipsum</name>

<t>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nibh mi, mollis varius imperdiet id, venenatis ut nisi. Phasellus mauris urna, ultrices at massa id, faucibus malesuada nisi.</t>

</section>


  </back>

<!-- ##markdown-source:
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
/g+ELIHL6Lkomv5b/A2e5H8AXcTRSMZLAAA=

-->

</rfc>

